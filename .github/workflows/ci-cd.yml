name: 🚀 Nurture CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.9'
  BACKEND_PORT: 8000
  FRONTEND_PORT: 3000

jobs:
  # ==========================================
  # 🔍 CODE QUALITY & SECURITY CHECKS
  # ==========================================
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'nurture-app/package-lock.json'

      - name: 🔒 Security Audit - Python
        run: |
          cd backend
          pip install safety bandit
          safety check -r requirements.txt --json || true
          bandit -r . -f json -o bandit-report.json || true

      - name: 🔒 Security Audit - Node.js
        run: |
          cd nurture-app
          npm audit --audit-level moderate || true

      - name: 🧹 Code Formatting - Python (Black)
        run: |
          cd backend
          pip install black
          black --check --diff .

      - name: 🧹 Code Formatting - JavaScript (Prettier)
        run: |
          cd nurture-app
          npm install
          npx prettier --check "src/**/*.{js,jsx,ts,tsx,json,css,md}"

      - name: ✨ Linting - Python (Flake8)
        run: |
          cd backend
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: ✨ Linting - JavaScript (ESLint)
        run: |
          cd nurture-app
          npx eslint src/ --ext .js,.jsx,.ts,.tsx --max-warnings 0

  # ==========================================
  # 🧪 BACKEND TESTING
  # ==========================================
  backend-tests:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']

    services:
      # Mock services for testing
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: 📦 Install Backend Dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-mock pytest-asyncio

      - name: 🔧 Setup Test Environment
        run: |
          cd backend
          cp .env.example .env
          echo "TESTING=true" >> .env
          echo "REDIS_URL=redis://localhost:6379" >> .env

      - name: 🧪 Run Unit Tests
        run: |
          cd backend
          python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
        env:
          PYTHONPATH: ${{ github.workspace }}/backend

      - name: 🧪 Run Integration Tests
        run: |
          cd backend
          python test-app.py
          python test-integration.py
        env:
          BACKEND_PORT: ${{ env.BACKEND_PORT }}
          TESTING: true

      - name: 📊 Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: 🏥 Health Check - Backend
        run: |
          cd backend
          python app.py &
          BACKEND_PID=$!
          sleep 10
          
          # Test health endpoint
          curl -f http://localhost:${{ env.BACKEND_PORT }}/api/health || exit 1
          
          # Test subjects endpoint  
          curl -f http://localhost:${{ env.BACKEND_PORT }}/api/subjects || exit 1
          
          kill $BACKEND_PID
        env:
          BACKEND_PORT: ${{ env.BACKEND_PORT }}

  # ==========================================
  # 🎨 FRONTEND TESTING
  # ==========================================
  frontend-tests:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    needs: code-quality

    strategy:
      matrix:
        node-version: ['16.x', '18.x', '20.x']

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: 'nurture-app/package-lock.json'

      - name: 📦 Install Frontend Dependencies
        run: |
          cd nurture-app
          npm ci --prefer-offline --no-audit

      - name: 🧪 Run Unit Tests
        run: |
          cd nurture-app
          npm test -- --coverage --watchAll=false --testResultsProcessor=jest-sonar-reporter
        env:
          CI: true

      - name: 🏗️ Build Frontend
        run: |
          cd nurture-app
          npm run build
        env:
          CI: true
          GENERATE_SOURCEMAP: false

      - name: 📊 Upload Frontend Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./nurture-app/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

      - name: 🗜️ Check Bundle Size
        run: |
          cd nurture-app
          npm install -g bundlesize
          bundlesize || true

      - name: 🏥 Health Check - Frontend
        run: |
          cd nurture-app
          npm start &
          FRONTEND_PID=$!
          sleep 30
          
          # Test if frontend is serving
          curl -f http://localhost:${{ env.FRONTEND_PORT }} || exit 1
          
          kill $FRONTEND_PID
        env:
          CI: true
          PORT: ${{ env.FRONTEND_PORT }}

  # ==========================================
  # 🔗 INTEGRATION TESTING
  # ==========================================
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'nurture-app/package-lock.json'

      - name: 🚀 Start Full Application
        run: |
          # Install dependencies
          cd backend && pip install -r requirements.txt & 
          cd nurture-app && npm ci &
          wait
          
          # Setup environment
          cd backend && cp .env.example .env
          echo "TESTING=true" >> backend/.env
          echo "REDIS_URL=redis://localhost:6379" >> backend/.env
          
          # Start services
          chmod +x start-dev.sh
          ./start-dev.sh &
          
          # Wait for services to be ready
          sleep 45

      - name: 🧪 Run End-to-End Tests
        run: |
          # Test API endpoints
          curl -f http://localhost:${{ env.BACKEND_PORT }}/api/health
          curl -f http://localhost:${{ env.BACKEND_PORT }}/api/subjects
          
          # Test frontend accessibility
          curl -f http://localhost:${{ env.FRONTEND_PORT }}
          
          # Run comprehensive integration tests
          cd backend
          python test-integration.py
        env:
          BACKEND_PORT: ${{ env.BACKEND_PORT }}
          FRONTEND_PORT: ${{ env.FRONTEND_PORT }}

  # ==========================================
  # 🔒 SECURITY SCANNING
  # ==========================================
  security-scan:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Run Snyk Security Scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --all-projects --severity-threshold=medium

      - name: 🔍 Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python
          queries: security-and-quality

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: 🔍 Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ==========================================
  # 🏗️ BUILD & CONTAINERIZATION
  # ==========================================
  build-and-containerize:
    name: 🏗️ Build & Containerize
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'

    outputs:
      backend-image: ${{ steps.backend-meta.outputs.tags }}
      frontend-image: ${{ steps.frontend-meta.outputs.tags }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract Backend Metadata
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: 🏷️ Extract Frontend Metadata  
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: 🏗️ Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: 🏗️ Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./nurture-app
          file: ./nurture-app/Dockerfile
          push: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  # ==========================================
  # 🚀 DEPLOYMENT
  # ==========================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, build-and-containerize]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ⚙️ Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🚀 Deploy to ECS Staging
        run: |
          echo "Deploying to staging environment..."
          # Add your ECS deployment commands here
          # aws ecs update-service --cluster staging --service nurture-backend --force-new-deployment
          # aws ecs update-service --cluster staging --service nurture-frontend --force-new-deployment
          echo "Staging deployment completed"

      - name: 🏥 Health Check - Staging
        run: |
          echo "Running staging health checks..."
          # curl -f https://staging.nurture.example.com/api/health
          echo "Staging health check completed"

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, build-and-containerize]
    if: github.event_name == 'release'
    environment: production

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ⚙️ Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🚀 Deploy to ECS Production
        run: |
          echo "Deploying to production environment..."
          # Add your ECS deployment commands here
          # aws ecs update-service --cluster production --service nurture-backend --force-new-deployment
          # aws ecs update-service --cluster production --service nurture-frontend --force-new-deployment
          echo "Production deployment completed"

      - name: 🏥 Health Check - Production
        run: |
          echo "Running production health checks..."
          # curl -f https://nurture.example.com/api/health
          echo "Production health check completed"

      - name: 📣 Notify Success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: "🎉 Nurture v${{ github.event.release.tag_name }} deployed successfully to production!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ==========================================
  # 📊 PERFORMANCE TESTING
  # ==========================================
  performance-tests:
    name: 📊 Performance Testing
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🚀 Start Application
        run: |
          chmod +x start-dev.sh
          ./start-dev.sh &
          sleep 45

      - name: ⚡ Lighthouse Performance Audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:${{ env.FRONTEND_PORT }}
          configPath: './lighthouse.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: 🔥 Load Testing with Artillery
        run: |
          npm install -g artillery
          echo "config:
            target: 'http://localhost:${{ env.BACKEND_PORT }}'
            phases:
              - duration: 60
                arrivalRate: 5
          scenarios:
            - name: 'Health Check Load Test'
              requests:
                - get:
                    url: '/api/health'
            - name: 'Subjects Load Test'  
              requests:
                - get:
                    url: '/api/subjects'" > artillery.yml
          artillery run artillery.yml

  # ==========================================
  # 📈 MONITORING & NOTIFICATIONS
  # ==========================================
  notify:
    name: 📈 Notifications
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan, performance-tests]
    if: always()

    steps:
      - name: 📊 Collect Workflow Status
        id: status
        run: |
          if [[ "${{ needs.integration-tests.result }}" == "success" && "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ All tests passed! Nurture is ready for deployment." >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Some tests failed. Please check the logs." >> $GITHUB_OUTPUT
          fi

      - name: 📣 Slack Notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ steps.status.outputs.status }}
          text: |
            ${{ steps.status.outputs.message }}
            
            📊 **Workflow Summary:**
            • Integration Tests: ${{ needs.integration-tests.result }}
            • Security Scan: ${{ needs.security-scan.result }}  
            • Performance Tests: ${{ needs.performance-tests.result }}
            
            🔗 **Details:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📧 Email Notification on Failure
        uses: dawidd6/action-send-mail@v3
        if: failure()
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "🚨 Nurture CI/CD Pipeline Failed"
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: "Nurture CI/CD <noreply@nurture.dev>"
          html_body: |
            <h2>🚨 Pipeline Failure Alert</h2>
            <p>The CI/CD pipeline for <strong>Nurture</strong> has failed.</p>
            <p><strong>Branch:</strong> ${{ github.ref_name }}</p>
            <p><strong>Commit:</strong> ${{ github.sha }}</p>
            <p><strong>Triggered by:</strong> ${{ github.actor }}</p>
            <p><a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">View Details</a></p>

  # ==========================================
  # 🧹 CLEANUP
  # ==========================================
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, notify]
    if: always()

    steps:
      - name: 🗑️ Clean up old packages
        run: |
          echo "Cleaning up old container images..."
          # Add commands to clean up old images from registry
          echo "Cleanup completed"

      - name: 📊 Update Deployment Status
        run: |
          echo "Updating deployment status badges..."
          # Add commands to update status badges or deployment tracking
          echo "Status update completed"